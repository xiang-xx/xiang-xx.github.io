<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>阅读 on Hugo Tania</title><link>https://xiang-xx.github.io/tags/%E9%98%85%E8%AF%BB/</link><description>Recent content in 阅读 on Hugo Tania</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 04 Feb 2023 09:31:29 +0800</lastBuildDate><atom:link href="https://xiang-xx.github.io/tags/%E9%98%85%E8%AF%BB/index.xml" rel="self" type="application/rss+xml"/><item><title>读《计算机程序的构造和解释》</title><link>https://xiang-xx.github.io/posts/read-sicp/</link><pubDate>Sat, 04 Feb 2023 09:31:29 +0800</pubDate><guid>https://xiang-xx.github.io/posts/read-sicp/</guid><description>前言 《计算机程序的构造和解释》（Structure and Interpretation of Computer Programs、SICP），也称 SICP，是麻省理工学院（MIT）计算机科学的入门教材。书中以 Scheme 语言为例（Lisp - List Processing 语言的一种方言），通过大量代码案例，详细介绍了程序如何抽象构造出来，以及程序解释/编译/运行的基本流程。对于日常使用高级语言的工程师来说，阅读此书能够对程序底层运行过程有一定的理解。
编程语言的抽象 编程语言提供一些基础元素，比如基本类型，运算符，关键字等，并使用表达式构建成语句，语句通过一系列的方式构成 复合过程（函数，方法，闭包，lambda 等）。
一个问题的求解过程通常可以有很多种，比如计算阶乘，可以用简单的递归算法：
1 2 3 4 5 6 func factorial(n int) int { if n == 1 { return 1 } return n * factorial(n-1) } 此算法的计算过程：先展开，后归约，比如计算 factorial(4)，展开与规约的过程：
4 * f(3) 4 * 3 * f(2) 4 * 3 * 2 * f(1) 4 * 3 * 2 * 1 4 * 3 * 2 4 * 6 24 如果使用迭代的方式计算：</description></item></channel></rss>